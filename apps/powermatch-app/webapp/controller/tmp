      onAfterRendering: function () {

         // var canvas = oHtml.getDomRef().querySelector("canvas");

         // garantir que Chart.js está carregado antes de criar o gráfico
         this._loadChartJs().then(() => {


            // Attach ao HTML control, que dispara quando ele realmente terminou o render
         var oHtml = this.byId("myChart");

    // Criar canvas dinamicamente
    oHtml.setContent("<canvas></canvas>");

    // Agora o getDomRef já existe
    setTimeout(function () {


    // Obter canvas do DOM
    var canvas = oHtml.getDomRef()
   //var canvas = oHtml.getDomRef().querySelector("canvas");
   this._initConsumptionChart();

    }, 0); // espera um tick para o DOM estar pronto



            oHtml.attachAfterRendering(function () {
               var canvas = oHtml.getDomRef().querySelector("canvas");
               if (!canvas) {
                  console.error("Canvas não encontrado!");
                  return;
               }

               this._initConsumptionChart();

            }.bind(this)); // bind para manter "this" do controller

         });
      },

      _loadChartJs: function () {
         return new Promise((resolve, reject) => {
            if (window.Chart) {
               resolve();
            } else {
               const script = document.createElement("script");
               script.src = "https://cdn.jsdelivr.net/npm/chart.js";
               script.defer = true;
               script.onload = () => resolve();
               script.onerror = () => reject("Falha ao carregar Chart.js");
               document.head.appendChild(script);
            }
         });
      },

      _initConsumptionChart: function () {
         var ctx = document.getElementById("chartCanvas");

         if (!this._oConsumptionChart) {
            this._oConsumptionChart = new Chart(ctx, {
               type: "pie",
               data: {
                  labels: [
                     this.getOwnerComponent().getModel("i18n").getResourceBundle().getText("hdrTtlConsEmpty"),
                     this.getOwnerComponent().getModel("i18n").getResourceBundle().getText("hdrTtlConsRush"),
                     this.getOwnerComponent().getModel("i18n").getResourceBundle().getText("hdrTtlConsFull")
                  ],
                  datasets: [{
                     data: [0, 0, 0] // inicia vazio
                  }]
               }
            });
         }
      },
